{
  "version": 3,
  "sources": ["deno:file:///home/stagas/work/stagas/webaudio-webcomponents/framework/dom.ts", "deno:file:///home/stagas/work/stagas/webaudio-webcomponents/framework/util.ts", "deno:file:///home/stagas/work/stagas/webaudio-webcomponents/framework/state.ts", "deno:file:///home/stagas/work/stagas/webaudio-webcomponents/framework/index.ts"],
  "sourcesContent": ["// deno-lint-ignore-file no-explicit-any no-extra-semi\n\nconst { SHOW_DOCUMENT_FRAGMENT, SHOW_ELEMENT, SHOW_TEXT } = NodeFilter\nconst whitespaceTagNames = ['PRE', 'TEXTAREA']\n\nconst map = new WeakMap()\n\nexport const trim = (html: string) =>\n  html.trim().replace(/(>)(\\s+)|(\\s+)(<\\/)/g, '$1$4')\n\nexport function parse(html: string, context: any = {}) {\n  const el = document.createElement('div')\n\n  el.innerHTML = html\n\n  const fragment = document.createDocumentFragment()\n  while (el.hasChildNodes()) fragment.appendChild(el.firstChild as HTMLElement)\n\n  const tree = document.createTreeWalker(\n    fragment,\n    SHOW_DOCUMENT_FRAGMENT | SHOW_ELEMENT | SHOW_TEXT,\n    null,\n    false,\n  )\n\n  const root: any = { tag: 'div', attrs: {}, children: [], context }\n\n  while (tree.nextNode()) {\n    const node = tree.currentNode\n    const parent = map.get(node.parentNode as HTMLElement)\n\n    let v: any\n\n    if (node.nodeType === Node.TEXT_NODE) {\n      v =\n        context.trim\n          && !whitespaceTagNames.includes(\n            (node.parentNode as HTMLElement)?.tagName,\n          )\n          ? trim(node.textContent ?? '')\n          : node.textContent\n    }\n    else {\n      v = {\n        tag: (node as HTMLElement).tagName,\n        ...attrs(node),\n        children: [],\n        context,\n      }\n\n      for (const name in v.events) {\n        const fn = new Function(\n          'event',\n          'context',\n          `with (context) { ${v.events[name]} }`,\n        )\n        v.events[name] = function(event: Event) {\n          return fn.call(this, event, v.context)\n        }\n      }\n    }\n\n    map.set(node, v)\n\n    if (parent) parent.children.push(v)\n    else root.children.push(v)\n  }\n\n  return root\n}\n\nconst attrs = (node: any) =>\n  [...node.attributes].reduce(\n    (\n      p,\n      n,\n    ) => (p[['attrs', 'events'][+(n.name.indexOf('on') === 0)]][n.name] =\n      n.value,\n      p),\n    { attrs: {}, events: {} },\n  )\n\nconst update = (node: any, v: any, parent: any, updated = v.updated) => {\n  if (!v.tag) {\n    return node.data !== v && (parent.updated = true) && (node.data = v)\n  }\n\n  for (const name in v.events) {\n    node[name] = v.events[name], updated = true\n  }\n\n  for (const name in v.attrs) {\n    if (node.getAttribute(name) !== v.attrs[name] && (updated = true)) {\n      node.setAttribute(name, v.attrs[name])\n    }\n  }\n\n  for (const { name } of [...node.attributes]) {\n    if (!(name in v.attrs) && (updated = true)) {\n      node.removeAttribute(name)\n    }\n  }\n\n  return v.updated = updated\n}\n\nconst create = (v: any) =>\n  v.tag && (v.rendered = true)\n    ? document.createElement(v.tag)\n    : document.createTextNode(v)\n\nexport function render(currentNode: any, v: any) {\n  const prev = currentNode.childNodes\n  const next = v.children\n\n  while (prev.length > next.length) {\n    currentNode.removeChild(currentNode.lastChild)\n  }\n\n  for (const [i, child] of next.entries()) {\n    let node = prev[i]\n\n    if (!node) {\n      currentNode.appendChild(node = create(child))\n    }\n    else if (node.tagName !== child.tag) {\n      currentNode.replaceChild(node = create(child), prev[i])\n    }\n\n    update(node, child, v)\n\n    if (child.children) render(node, child)\n  }\n\n  if (v.updated) dispatch(currentNode, 'onupdate')\n  if (v.rendered) dispatch(currentNode, 'onrender')\n}\n\nconst dispatch = (node: any, event: string, fn = node.tagName && node[event]) =>\n  fn && fn.call(node)\n\nexport function dom(parent: any, html: string, context: any) {\n  render(parent, parse(html, context))\n}\n", "// deno-lint-ignore-file no-explicit-any no-extra-semi\n\nimport { effect } from './state.ts'\n\nexport const top: any = window\ntop.__methods__ ??= new Map()\ntop.__currentObject__ ??= null\n\nexport const UID = (key?: string) => {\n  return (key ? key + '_' : '') + (Math.random() * 10e6 | 0).toString(36)\n}\n\nexport const patchMethod = (obj: any, method: any, key?: string) => {\n  const uid = UID(key)\n  top.__methods__.set(uid, method.bind(obj))\n  method.toString = () => `__methods__.get('${uid}')`\n  return method\n}\n\nexport const patchMethods = (obj: any, methods: Record<string, any>) => {\n  for (const [key, method] of Object.entries(methods)) {\n    if (typeof method !== 'function') continue\n    patchMethod(obj, method, key)\n  }\n  return methods\n}\n\nexport const bind = (obj: any) =>\n  (parts: string[], ...values: any[]) => {\n    let str = ''\n    for (let i = 0; i < parts.length; i++) {\n      str += parts[i]\n      const value = values[i]\n      if (typeof value === 'function') {\n        str += patchMethod(obj ?? top.__currentObject__, value).toString()\n      }\n      else if (value) {\n        str += value\n      }\n    }\n    return str\n  }\n\nexport const el = (tagName: string, content: any) => {\n  const uid = UID('x')\n  const str = `<${tagName} id=\"${uid}\"></${tagName.split(' ')[0]}>`\n  const obj = top.__currentObject__\n  effect(() => {\n    const domEl = obj.get('#' + uid)\n    if (domEl) {\n      domEl.textContent = content.value\n    }\n  }, content)\n  return str\n}\n", "// deno-lint-ignore-file no-explicit-any no-extra-semi\n\nimport { patchMethod, top } from './util.ts'\n\nexport type Constructor =\n  | ArrayConstructor\n  | ObjectConstructor\n  | StringConstructor\n  | NumberConstructor\n  | BooleanConstructor\n  | FunctionConstructor\n\nexport type StateTypes = Record<string, Constructor>\n\nexport const Types: StateTypes = {\n  array: Array,\n  object: Object,\n  string: String,\n  number: Number,\n  boolean: Boolean,\n  function: Function,\n}\n\nconst getType = (value: any) => {\n  return Array.isArray(value) ? Types.array : Types[typeof value]\n}\n\nconst getDefaultValue = (value: any) => {\n  // dprint-ignore\n  return value === Boolean  ? false\n       : value === Array    ? []\n       : value === Function ? () => {}\n       : value === String   ? ''\n       : null\n}\n\nconst castTo = (type: any, value: any) => {\n  // dprint-ignore\n  return type === Boolean && value === ''                 ? true\n       : type === Array    ? (Array.isArray(value)        ? value.slice() : [])\n       : type === Function ? (typeof value === 'function' ? value : () => {})\n       : type(value)\n}\n\nconst proxies = new WeakMap()\n\nlet _unwrap = false\nlet _quiet = false\n\nexport const quiet = (fn: () => void) => {\n  const prevQuiet = _quiet\n  _quiet = true\n  try {\n    fn()\n  }\n  catch (e) {\n    console.error(e)\n  }\n  _quiet = prevQuiet\n}\n\ntype StateDescription = Record<string, any>\n\nexport const state = (desc: StateDescription = {}) => {\n  const target: Record<string, any> = {}\n  const types = new Map()\n  const props = new Map()\n  const resolved = new Set()\n\n  for (const [prop, value] of Object.entries(desc)) {\n    if (Object.values(Types).includes(value)) {\n      types.set(prop, value)\n      target[prop] = getDefaultValue(value)\n    }\n    else {\n      types.set(prop, getType(value))\n      target[prop] = value\n      resolved.add(prop)\n    }\n    props.set(prop, new Set())\n  }\n\n  const proxy = new Proxy(target, {\n    get(target, prop, proxy) {\n      if (_unwrap) return Reflect.get(target, prop)\n      else {\n        return {\n          name: prop,\n          proxy,\n          subscribe(fn: () => void) {\n            props.get(prop).add(fn)\n          },\n          unsubscribe(fn: () => void) {\n            props.get(prop).delete(fn)\n          },\n          get hasResolved() {\n            return resolved.has(prop)\n          },\n          get value() {\n            return this.valueOf()\n          },\n          [Symbol.toPrimitive]() {\n            return this.valueOf()\n          },\n          valueOf() {\n            return Reflect.get(target, prop)\n          },\n        }\n      }\n    },\n\n    set(target, prop, value) {\n      // if (_quiet) {\n      //   return Reflect.set(target, prop, value)\n      // }\n      const type = types.get(prop)\n\n      if (!type) {\n        throw new ReferenceError('State has no property: ' + prop.toString())\n      }\n\n      const valueToSet = castTo(type, value)\n\n      // if value is the same as before, don't trigger\n      if (valueToSet === Reflect.get(target, prop)) {\n        return true\n      }\n\n      const result = Reflect.set(target, prop, valueToSet)\n\n      if (result) {\n        resolved.add(prop)\n\n        // TODO: microtask fn triggers\n        props.get(prop).forEach((fn: () => void) =>\n          triggerIfSatisfied(fn, prop)\n        )\n      }\n\n      return result\n    },\n\n    ownKeys(target) {\n      return Reflect.ownKeys(target)\n    },\n  })\n\n  proxies.set(proxy, { target, props, types, resolved })\n\n  return proxy\n}\n\nconst unwrapFactory = (flag: boolean) =>\n  (fn: () => void) => {\n    const prevUnwrap = _unwrap\n    _unwrap = flag\n    try {\n      fn()\n    }\n    catch (e) {\n      console.error(e)\n    }\n    _unwrap = prevUnwrap\n  }\n\nexport const unwrap = unwrapFactory(true)\nexport const wrap = unwrapFactory(false)\n\nconst effects = new WeakMap()\nconst once = new WeakSet()\n\nconst triggerIfSatisfied = (fn: () => void, _prop?: string | symbol) => {\n  const deps = [...effects.get(fn)]\n  const didUpdate = deps.every((prop) => prop.hasResolved)\n  if (didUpdate) {\n    top.__currentObject__ = contexts.get(fn)\n    unwrap(fn)\n    if (once.has(fn)) {\n      once.delete(fn)\n      deps.forEach((dep) => dep.unsubscribe(fn))\n      effects.delete(fn)\n    }\n  }\n}\n\nconst contexts = new WeakMap()\n\nexport const effect = (fn: () => void, ...deps: any[]) => {\n  deps = deps.filter(Boolean)\n  contexts.set(fn, top.__currentObject__)\n  effects.set(fn, new Set(deps))\n  try {\n    wrap(() => deps.forEach((dep) => dep.subscribe(fn)))\n    triggerIfSatisfied(fn)\n  }\n  catch (e) {\n    console.trace(deps)\n    console.error(e)\n  }\n  return () => {\n    once.delete(fn)\n    wrap(() => deps.forEach((dep) => dep.unsubscribe(fn)))\n    effects.delete(fn)\n  }\n}\n\neffect.once = (fn: () => void, ...deps: any[]) => {\n  once.add(fn)\n  return effect(fn, ...deps)\n}\n\neffect.wrap = (fn: () => void, ...deps: any[]) => {\n  return effect(wrap(fn) as any, ...deps)\n}\n\nexport const callback = (fn: (...args: any[]) => void, obj: any) => {\n  const callbackFn = (...args: any[]) => {\n    let result\n    unwrap(() => {\n      result = fn(...args)\n    })\n    return result\n  }\n  if (obj) {\n    patchMethod(obj, callbackFn)\n  }\n  return callbackFn\n}\n\ntype Task = { fn: (...args: any[]) => Promise<void>; args: any[] }\n\nexport const atomic = (fn: (...args: any[]) => Promise<void>) => {\n  let next: Task | null\n  let task: Task | null\n  let promise: Promise<void> | null\n\n  const run = async (): Promise<void> => {\n    if (task) await promise\n    task = next\n\n    next = null\n\n    if (task) {\n      try {\n        promise = task.fn(...task.args)\n        await promise\n      }\n      catch (e) {\n        console.error(e)\n      }\n      finally {\n        task = null\n      }\n    }\n\n    if (next) return run()\n  }\n\n  return (...args: any[]) => {\n    const hadNext = next\n    next = { fn, args }\n    if (!hadNext) {\n      return run()\n    }\n    else {\n      return promise\n    }\n  }\n}\n", "// deno-lint-ignore-file no-explicit-any no-extra-semi\n\nimport { dom } from './dom.ts'\nimport { effect, quiet, state, Types, unwrap, wrap } from './state.ts'\nimport { bind, patchMethods, top } from './util.ts'\n\nexport * from './state.ts'\nexport * from './util.ts'\n\ntype ComponentDescriptor = {\n  class: string\n  extends: typeof Base\n  slot: boolean\n} & ComponentParams\n\nconst ComponentDescriptorProperties = [\n  'class',\n  'extends',\n  'slot',\n  'attrs',\n  'props',\n  'pins',\n  'component',\n]\n\nconst arrayEqual = (a: any[], b: any[]) => a.every((x, i) => x === b[i])\n\nconst pascalCase = (s: string) =>\n  s.split('-').map((p: string) => p[0].toLocaleUpperCase() + p.slice(1)).join(\n    '',\n  )\n\nconst mergeFilter = (\n  target: Record<string, any>,\n  source: Record<string, any>,\n  fn: (key: string, value: any) => boolean,\n) => {\n  for (const [key, value] of Object.entries(source)) {\n    if (fn(key, value)) target[key] = value\n  }\n  return target\n}\n\n// deno-lint-ignore valid-typeof\nconst is = (type: any, item: any) => typeof item === type\nconst isType = (item: any) => Object.values(Types).includes(item)\nconst isProp = (key: string) => ComponentDescriptorProperties.includes(key)\n\nconst getLocalProperties = (d: ComponentDescriptor) =>\n  mergeFilter({}, d, (k, v) => !is('function', v) && !isProp(k))\nconst getPrototypeMethods = (d: ComponentDescriptor) =>\n  mergeFilter({}, d, (k, v) => is('function', v) && !isProp(k))\n\nconst copy = (target: Record<string, any>, source: Record<string, any>) => {\n  for (const [key, value] of Object.entries(source)) {\n    if (Array.isArray(value)) {\n      target[key] = value.slice()\n    }\n    else if (typeof value === 'object') {\n      target[key] = Object.create(value)\n    }\n    else {\n      target[key] = value\n    }\n  }\n}\n\nexport const mergeParams = (target: any = {}, source: any = {}) => {\n  for (const [key, value] of Object.entries(source)) {\n    if (Array.isArray(value)) {\n      target[key] = value.slice()\n    }\n    else if (typeof value === 'object') {\n      target[key] = mergeParams(target[key] || {}, value)\n    }\n    else {\n      target[key] = value\n    }\n  }\n  return target\n}\n\nconst createAccessors = (\n  target: any,\n  source: any = {},\n  accessors: any = {},\n) => {\n  for (const key in source) {\n    // save the instance value\n    const value = target[key]\n    Object.defineProperty(target, key, {\n      get() {\n        return accessors.get?.call(this, key) ?? Reflect.get(source, key)\n      },\n      set(value: any) {\n        accessors.set?.call(this, key, value)\n        return Reflect.set(source, key, value)\n      },\n    })\n    // re-apply value to trigger setter\n    if (value != null) target[key] = value\n  }\n}\n\nclass Base extends HTMLElement {\n  static slot: boolean\n  static observedAttributes: string[]\n\n  html!: string\n  slotted!: Array<Element>\n  params: ComponentParams\n  state: ComponentParams\n\n  constructor({ attrs = {}, props = {}, pins = {} }: ComponentParams = {}) {\n    super()\n\n    const self = this as any\n    const ctor = this.constructor as typeof Base\n\n    const params: ComponentParams = mergeParams({ attrs, props, pins }, {\n      props: { slotted: Array, html: String },\n    })\n\n    this.params = params\n\n    this.state ??= {\n      attrs: state(params.attrs),\n      props: state(params.props),\n      pins: state(\n        Object.fromEntries(\n          Object.keys(params.pins ?? {}).map(key => [key, Object]),\n        ),\n      ),\n    }\n\n    createAccessors(this, this.state.props)\n    createAccessors(this, this.state.attrs, {\n      set(key: string, value: any) {\n        if (this.getAttribute(key) != value) {\n          // this will trigger the observed attributes\n          // and this function will run again, so we\n          // return and let the observed fn to proceed\n          this.setAttribute(key, value)\n          return\n        }\n      },\n    })\n    createAccessors(this, this.state.pins)\n\n    if (ctor.slot) this.createSlot()\n\n    // const emitProps = () => {\n    //   for (const key in this.state.attrs) {\n    //     emitKey(key, (this as any)[key])\n    //   }\n    //   for (const key in this.state.props) {\n    //     emitKey(key, (this as any)[key])\n    //   }\n    //   // for (const key in this.state.pins) {\n    //   //   emitKey(key, (this as any)[key])\n    //   // }\n    // }\n\n    effect(() => {\n      wrap(() => {\n        this.root.innerHTML = this.html\n\n        for (const [key, selector] of Object.entries(params.pins ?? {})) {\n          self[key] = this.get(selector as string)\n        }\n\n        const slot = this.root.querySelector('slot')\n        if (slot) {\n          this.useSlot(slot)\n        }\n      })\n      // emitProps()\n    }, this.html)\n\n    // const emitSlotted = () => {\n    //   this.slotted.forEach((el: any) => {\n    //     const names = el.getAttributeNames()\n    //     for (const name of names) {\n    //       if (name.slice(-1) === '_') {\n    //         const key = name.slice(0, -1)\n    //         const selector = el.getAttribute(name) || key\n    //         el[selector] = (this as any)[key]\n    //       }\n    //     }\n    //   })\n    // }\n\n    // effect(() => {\n    //   emitProps()\n    //   // emitSlotted()\n    // }, this.slotted)\n  }\n\n  get root() {\n    if (!this.shadowRoot) this.attachShadow({ mode: 'open' })\n    return this.shadowRoot as ShadowRoot\n  }\n\n  render(parts: string[], ...values: any[]) {\n    wrap(() => {\n      dom(this.root, bind(this)(parts, ...values), this)\n\n      wrap(() => {\n        for (const [key, selector] of Object.entries(this.params.pins ?? {})) {\n          ;(this as any)[key] = this.get(selector as string)\n        }\n      })\n\n      const slot = this.root.querySelector('slot')\n      if (slot) {\n        this.useSlot(slot)\n      }\n    })\n  }\n\n  useSlot(slot: HTMLSlotElement) {\n    const elements = () => slot.assignedElements({ flatten: true }).slice()\n    if (slot.parentNode !== this.root) {\n      this.root.appendChild(slot)\n    }\n    const get = () => {\n      const newElements = elements()\n      if (newElements.length) {\n        this.slotted = newElements\n      }\n    }\n    get()\n    slot.addEventListener('slotchange', get)\n  }\n\n  createSlot() {\n    const slot = document.createElement('slot')\n    this.useSlot(slot)\n  }\n\n  get(selector: string) {\n    return this?.shadowRoot?.querySelector?.(selector)\n  }\n\n  getSlot(selector: string) {\n    return this?.shadowRoot?.querySelector?.('slot')?.querySelector(selector)\n  }\n\n  getAll(selector: string) {\n    return this?.shadowRoot?.querySelectorAll?.(selector)\n  }\n\n  getAllSlot(selector: string) {\n    return this?.shadowRoot?.querySelector?.('slot')?.querySelectorAll(selector)\n  }\n\n  dispatch(name: string, payload: any) {\n    this.dispatchEvent(\n      new CustomEvent(name, { bubbles: true, composed: true, detail: payload }),\n    )\n  }\n\n  attributeChangedCallback(\n    this: any,\n    name: string,\n    _oldValue: any,\n    newValue: any,\n  ) {\n    wrap(() => {\n      this[name] = newValue\n    })\n  }\n}\n\ntype ComponentParams = {\n  component?: () => void\n  attrs?: Record<string, any>\n  props?: Record<string, any>\n  pins?: Record<string, string>\n}\n\nexport const create = (d: ComponentDescriptor) => {\n  const { component = () => {}, attrs = {}, props = {}, pins = {} } = d\n  const Parent = d.extends ?? Base\n  const className = pascalCase(d.class)\n  const Component = {\n    [className]: class extends Parent {\n      constructor(params: ComponentParams) {\n        super(mergeParams(params, { attrs, props, pins }))\n        top.__currentObject__ = this\n        patchMethods(this, getPrototypeMethods(d))\n        copy(this, getLocalProperties(d))\n        component?.call(this)\n      }\n    },\n  }\n\n  Object.assign(Component[className], { slot: Parent.slot || d.slot, desc: d })\n  Object.assign(Component[className].prototype, getPrototypeMethods(d))\n  Object.defineProperty(Component[className], 'observedAttributes', {\n    get() {\n      return Object.keys(d.attrs ?? []).concat(\n        (Parent ?? {}).observedAttributes || [],\n      )\n    },\n  })\n\n  return Component[className]\n}\n"],
  "mappings": "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",
  "names": []
}
