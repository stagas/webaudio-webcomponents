
var __toBinary = (() => {
  var table = new Uint8Array(128);
  for (var i = 0; i < 64; i++)
    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    var n = base64.length, bytes = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i2 = 0, j = 0; i2 < n; ) {
      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();

var wasm = __toBinary("");

// src/typescript/loader/index.js
var ID_OFFSET = -8;
var SIZE_OFFSET = -4;
var ARRAYBUFFER_ID = 0;
var STRING_ID = 1;
var ARRAYBUFFERVIEW = 1 << 0;
var ARRAY = 1 << 1;
var STATICARRAY = 1 << 2;
var VAL_ALIGN_OFFSET = 6;
var VAL_SIGNED = 1 << 11;
var VAL_FLOAT = 1 << 12;
var VAL_MANAGED = 1 << 14;
var ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;
var ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;
var ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;
var ARRAYBUFFERVIEW_SIZE = 12;
var ARRAY_LENGTH_OFFSET = 12;
var ARRAY_SIZE = 16;
var BIGINT = typeof BigUint64Array !== "undefined";
var THIS = Symbol();
function getStringImpl(buffer, ptr) {
  const len = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2] >>> 1;
  const arr = new Uint16Array(buffer, ptr, len);
  return String.fromCharCode.apply(String, arr);
}
function preInstantiate(imports2) {
  const extendedExports = {};
  function getString(memory, ptr) {
    if (!memory)
      return "<yet unknown>";
    return getStringImpl(memory.buffer, ptr);
  }
  const env = imports2.env = imports2.env || {};
  env.abort = env.abort || function abort(msg, file, line, colm) {
    const memory = extendedExports.memory || env.memory;
    throw Error(`abort: ${getString(memory, msg)} at ${getString(memory, file)}:${line}:${colm}`);
  };
  env.trace = env.trace || function trace(msg, n, ...args) {
    const memory = extendedExports.memory || env.memory;
    console.log(`trace: ${getString(memory, msg)}${n ? " " : ""}${args.slice(0, n).join(", ")}`);
  };
  env.seed = env.seed || Date.now;
  imports2.Math = imports2.Math || Math;
  imports2.Date = imports2.Date || Date;
  return extendedExports;
}
var E_NOEXPORTRUNTIME = "Operation requires compiling with --exportRuntime";
var F_NOEXPORTRUNTIME = function() {
  throw Error(E_NOEXPORTRUNTIME);
};
function postInstantiate(extendedExports, instance2) {
  const exports = instance2.exports;
  const memory = exports.memory;
  const table = exports.table;
  const __new = exports.__new || F_NOEXPORTRUNTIME;
  const __pin = exports.__pin || F_NOEXPORTRUNTIME;
  const __unpin = exports.__unpin || F_NOEXPORTRUNTIME;
  const __collect = exports.__collect || F_NOEXPORTRUNTIME;
  const __rtti_base = exports.__rtti_base || ~0;
  extendedExports.__new = __new;
  extendedExports.__pin = __pin;
  extendedExports.__unpin = __unpin;
  extendedExports.__collect = __collect;
  function getInfo(id) {
    const U32 = new Uint32Array(memory.buffer);
    const count = U32[__rtti_base >>> 2];
    if ((id >>>= 0) >= count)
      throw Error(`invalid id: ${id}`);
    return U32[(__rtti_base + 4 >>> 2) + id * 2];
  }
  function getArrayInfo(id) {
    const info = getInfo(id);
    if (!(info & (ARRAYBUFFERVIEW | ARRAY | STATICARRAY)))
      throw Error(`not an array: ${id}, flags=${info}`);
    return info;
  }
  function getBase(id) {
    const U32 = new Uint32Array(memory.buffer);
    const count = U32[__rtti_base >>> 2];
    if ((id >>>= 0) >= count)
      throw Error(`invalid id: ${id}`);
    return U32[(__rtti_base + 4 >>> 2) + id * 2 + 1];
  }
  function getValueAlign(info) {
    return 31 - Math.clz32(info >>> VAL_ALIGN_OFFSET & 31);
  }
  function __newString(str) {
    if (str == null)
      return 0;
    const length = str.length;
    const ptr = __new(length << 1, STRING_ID);
    const U16 = new Uint16Array(memory.buffer);
    for (var i = 0, p = ptr >>> 1; i < length; ++i)
      U16[p + i] = str.charCodeAt(i);
    return ptr;
  }
  extendedExports.__newString = __newString;
  function __getString2(ptr) {
    if (!ptr)
      return null;
    const buffer = memory.buffer;
    const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];
    if (id !== STRING_ID)
      throw Error(`not a string: ${ptr}`);
    return getStringImpl(buffer, ptr);
  }
  extendedExports.__getString = __getString2;
  function getView(alignLog2, signed, float) {
    const buffer = memory.buffer;
    if (float) {
      switch (alignLog2) {
        case 2:
          return new Float32Array(buffer);
        case 3:
          return new Float64Array(buffer);
      }
    } else {
      switch (alignLog2) {
        case 0:
          return new (signed ? Int8Array : Uint8Array)(buffer);
        case 1:
          return new (signed ? Int16Array : Uint16Array)(buffer);
        case 2:
          return new (signed ? Int32Array : Uint32Array)(buffer);
        case 3:
          return new (signed ? BigInt64Array : BigUint64Array)(buffer);
      }
    }
    throw Error(`unsupported align: ${alignLog2}`);
  }
  function __newArray(id, values) {
    const info = getArrayInfo(id);
    const align = getValueAlign(info);
    const length = values.length;
    const buf = __new(length << align, info & STATICARRAY ? id : ARRAYBUFFER_ID);
    let result;
    if (info & STATICARRAY) {
      result = buf;
    } else {
      __pin(buf);
      const arr = __new(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);
      __unpin(buf);
      const U32 = new Uint32Array(memory.buffer);
      U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = buf;
      U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;
      U32[arr + ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;
      if (info & ARRAY)
        U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;
      result = arr;
    }
    const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);
    if (info & VAL_MANAGED) {
      for (let i = 0; i < length; ++i) {
        const value = values[i];
        view[(buf >>> align) + i] = value;
      }
    } else {
      view.set(values, buf >>> align);
    }
    return result;
  }
  extendedExports.__newArray = __newArray;
  function __getArrayView(arr) {
    const U32 = new Uint32Array(memory.buffer);
    const id = U32[arr + ID_OFFSET >>> 2];
    const info = getArrayInfo(id);
    const align = getValueAlign(info);
    let buf = info & STATICARRAY ? arr : U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];
    const length = info & ARRAY ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2] : U32[buf + SIZE_OFFSET >>> 2] >>> align;
    return getView(align, info & VAL_SIGNED, info & VAL_FLOAT).subarray(buf >>>= align, buf + length);
  }
  extendedExports.__getArrayView = __getArrayView;
  function __getArray2(arr) {
    const input = __getArrayView(arr);
    const len = input.length;
    const out = new Array(len);
    for (let i = 0; i < len; i++)
      out[i] = input[i];
    return out;
  }
  extendedExports.__getArray = __getArray2;
  function __getArrayBuffer(ptr) {
    const buffer = memory.buffer;
    const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];
    return buffer.slice(ptr, ptr + length);
  }
  extendedExports.__getArrayBuffer = __getArrayBuffer;
  function getTypedArray(Type, alignLog2, ptr) {
    return new Type(getTypedArrayView(Type, alignLog2, ptr));
  }
  function getTypedArrayView(Type, alignLog2, ptr) {
    const buffer = memory.buffer;
    const U32 = new Uint32Array(buffer);
    const bufPtr = U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];
    return new Type(buffer, bufPtr, U32[bufPtr + SIZE_OFFSET >>> 2] >>> alignLog2);
  }
  function attachTypedArrayFunctions(ctor, name, align) {
    extendedExports[`__get${name}`] = getTypedArray.bind(null, ctor, align);
    extendedExports[`__get${name}View`] = getTypedArrayView.bind(null, ctor, align);
  }
  ;
  [
    Int8Array,
    Uint8Array,
    Uint8ClampedArray,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array
  ].forEach((ctor) => {
    attachTypedArrayFunctions(ctor, ctor.name, 31 - Math.clz32(ctor.BYTES_PER_ELEMENT));
  });
  if (BIGINT) {
    ;
    [BigUint64Array, BigInt64Array].forEach((ctor) => {
      attachTypedArrayFunctions(ctor, ctor.name.slice(3), 3);
    });
  }
  function __instanceof(ptr, baseId) {
    const U32 = new Uint32Array(memory.buffer);
    let id = U32[ptr + ID_OFFSET >>> 2];
    if (id <= U32[__rtti_base >>> 2]) {
      do {
        if (id == baseId)
          return true;
        id = getBase(id);
      } while (id);
    }
    return false;
  }
  extendedExports.__instanceof = __instanceof;
  extendedExports.memory = extendedExports.memory || memory;
  extendedExports.table = extendedExports.table || table;
  return demangle(exports, extendedExports);
}
function isModule(src) {
  return src instanceof WebAssembly.Module;
}
function instantiateSync(source, imports2 = {}) {
  const module = isModule(source) ? source : new WebAssembly.Module(source);
  const extended = preInstantiate(imports2);
  const instance2 = new WebAssembly.Instance(module, imports2);
  const exports = postInstantiate(extended, instance2);
  return {module, instance: instance2, exports};
}
function demangle(exports, extendedExports = {}) {
  const setArgumentsLength = exports["__argumentsLength"] ? (length) => {
    exports["__argumentsLength"].value = length;
  } : exports["__setArgumentsLength"] || exports["__setargc"] || (() => {
  });
  for (let internalName in exports) {
    if (!Object.prototype.hasOwnProperty.call(exports, internalName))
      continue;
    const elem = exports[internalName];
    let parts = internalName.split(".");
    let curr = extendedExports;
    while (parts.length > 1) {
      let part = parts.shift();
      if (!Object.prototype.hasOwnProperty.call(curr, part))
        curr[part] = {};
      curr = curr[part];
    }
    let name = parts[0];
    let hash = name.indexOf("#");
    if (hash >= 0) {
      const className = name.substring(0, hash);
      const classElem = curr[className];
      if (typeof classElem === "undefined" || !classElem.prototype) {
        const ctor = function(...args) {
          return ctor.wrap(ctor.prototype.constructor(0, ...args));
        };
        ctor.prototype = {
          valueOf() {
            return this[THIS];
          }
        };
        ctor.wrap = function(thisValue) {
          return Object.create(ctor.prototype, {
            [THIS]: {value: thisValue, writable: false}
          });
        };
        if (classElem)
          Object.getOwnPropertyNames(classElem).forEach((name2) => Object.defineProperty(ctor, name2, Object.getOwnPropertyDescriptor(classElem, name2)));
        curr[className] = ctor;
      }
      name = name.substring(hash + 1);
      curr = curr[className].prototype;
      if (/^(get|set):/.test(name)) {
        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {
          let getter = exports[internalName.replace("set:", "get:")];
          let setter = exports[internalName.replace("get:", "set:")];
          Object.defineProperty(curr, name, {
            get() {
              return getter(this[THIS]);
            },
            set(value) {
              setter(this[THIS], value);
            },
            enumerable: true
          });
        }
      } else {
        if (name === "constructor") {
          ;
          (curr[name] = (...args) => {
            setArgumentsLength(args.length);
            return elem(...args);
          }).original = elem;
        } else {
          ;
          (curr[name] = function(...args) {
            setArgumentsLength(args.length);
            return elem(this[THIS], ...args);
          }).original = elem;
        }
      }
    } else {
      if (/^(get|set):/.test(name)) {
        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {
          Object.defineProperty(curr, name, {
            get: exports[internalName.replace("set:", "get:")],
            set: exports[internalName.replace("get:", "set:")],
            enumerable: true
          });
        }
      } else if (typeof elem === "function" && elem !== setArgumentsLength) {
        ;
        (curr[name] = (...args) => {
          setArgumentsLength(args.length);
          return elem(...args);
        }).original = elem;
      } else {
        curr[name] = elem;
      }
    }
  }
  return extendedExports;
}

// src/typescript/audioworklet/plugin.ts
var imports = {
  env: {
    log: (strPtr) => {
      const str = instance.exports.__getString(strPtr);
      console.log(str);
    }
  }
};
var instance = instantiateSync(wasm, imports);
instance.exports.nonce = "";
var plugin_default = instance.exports;

// src/typescript/messagequeue/index.ts
var MessageQueue = class {
  constructor(buffer) {
    this.buffer = buffer;
  }
  get readPtr() {
    return this.buffer[0];
  }
  set readPtr(index) {
    this.buffer[0] = index;
  }
  get writePtr() {
    return this.buffer[1];
  }
  set writePtr(index) {
    this.buffer[1] = index;
  }
  clear() {
    this.buffer.fill(-Infinity);
    this.readPtr = 2;
    this.writePtr = 2;
    return this;
  }
  push(...values) {
    const buffer = this.buffer;
    const ptr = this.writePtr;
    buffer.set(values, ptr);
    this.writePtr = ptr + values.length;
  }
  shift() {
    const buffer = this.buffer;
    const ptr = this.readPtr;
    const value = buffer[ptr];
    if (!isFinite(value)) {
      this.readPtr = this.writePtr = 2;
      return void 0;
    }
    buffer[ptr] = -Infinity;
    this.readPtr = ptr + 1;
    return value;
  }
  slice(length) {
    const buffer = this.buffer;
    const ptr = this.readPtr;
    const slice = buffer.subarray(ptr, ptr + length);
    if (!isFinite(slice[0])) {
      this.buffer.fill(-Infinity, 2, 2 + ptr);
      this.readPtr = this.writePtr = 2;
      return void 0;
    }
    this.readPtr = ptr + length;
    return slice;
  }
};
var messagequeue_default = MessageQueue;

// src/typescript/audioworklet/index.ts
var {
  nonce,
  __getString,
  __getArray,
  __getFloat32ArrayView,
  __getUint8ArrayView,
  maxBlockSize,
  AudioPluginProcessorOptions,
  AudioChannels,
  AudioParamMap,
  getPluginDescriptor,
  getNumPresets,
  getPresetData,
  getPresetName,
  getParameterDescriptors,
  getInputChannelCount,
  getOutputChannelCount,
  DefaultPlugin,
  process,
  onMIDIMessage,
  onInit
} = plugin_default;
var wasm2;
(function(wasm3) {
  const pluginDescriptorPtr = DefaultPlugin.pluginDescriptor;
  const parts = __getString(getPluginDescriptor(pluginDescriptorPtr)).split(",,");
  [
    wasm3.pluginName,
    wasm3.pluginVendor,
    wasm3.pluginCategory,
    wasm3.pluginUniqueId,
    wasm3.pluginVersion
  ] = parts;
  wasm3.inputChannelCountPtr = getInputChannelCount(pluginDescriptorPtr);
  wasm3.inputChannelCount = __getArray(wasm3.inputChannelCountPtr);
  wasm3.outputChannelCountPtr = getOutputChannelCount(pluginDescriptorPtr);
  wasm3.outputChannelCount = __getArray(wasm3.outputChannelCountPtr);
  const numberOfPresets = getNumPresets(pluginDescriptorPtr);
  wasm3.pluginPresets = new Array(numberOfPresets);
  for (let i = 0; i < numberOfPresets; i++) {
    const name = __getString(getPresetName(pluginDescriptorPtr, i));
    const values = __getFloat32ArrayView(getPresetData(pluginDescriptorPtr, i)).slice();
    const preset = {
      name,
      values
    };
    wasm3.pluginPresets[i] = preset;
  }
  wasm3.parameterDescriptorsPtr = DefaultPlugin.parameterDescriptors;
  wasm3.parameterDescriptors = [];
  {
    const params = __getString(getParameterDescriptors(wasm3.parameterDescriptorsPtr)).split("$$").filter(Boolean);
    for (let p = 0; p < params.length; p++) {
      const parts2 = params[p].split(",,");
      const [
        name,
        defaultValue,
        minValue,
        maxValue,
        automationRate,
        slope,
        select,
        displayUnit,
        symmetric,
        stringValue
      ] = parts2.slice(0, 10);
      const param = {
        name,
        defaultValue: parseFloat(defaultValue),
        minValue: parseFloat(minValue),
        maxValue: parseFloat(maxValue),
        automationRate,
        slope: parseFloat(slope),
        select: select.split(";;").filter(Boolean),
        displayUnit,
        symmetric: Boolean(parseInt(symmetric)),
        stringValue
      };
      wasm3.parameterDescriptors.push(param);
    }
  }
})(wasm2 || (wasm2 = {}));
function getParameterValues(wasmParamMap, index) {
  const ptr = index * maxBlockSize;
  const values = __getFloat32ArrayView(wasmParamMap.data).subarray(ptr, ptr + blockSize);
  return values;
}
var ParameterValuesChanged;
(function(ParameterValuesChanged2) {
  ParameterValuesChanged2[ParameterValuesChanged2["None"] = 0] = "None";
  ParameterValuesChanged2[ParameterValuesChanged2["Single"] = 1] = "Single";
  ParameterValuesChanged2[ParameterValuesChanged2["Every"] = 2] = "Every";
})(ParameterValuesChanged || (ParameterValuesChanged = {}));
var Util;
(function(Util2) {
  function updateParameterData(wasmParamMap, parameters) {
    const changed = __getUint8ArrayView(wasmParamMap.changed);
    wasm2.parameterDescriptors.forEach((param, index) => {
      const workletValues = parameters[param.name];
      const wasmValues = getParameterValues(wasmParamMap, index);
      const isConstant = workletValues.length === 1;
      if (isConstant) {
        if (workletValues[0] === wasmValues[0]) {
          changed[index] = 0;
        } else {
          changed[index] = 1;
          wasmValues.fill(workletValues[0]);
        }
      } else {
        changed[index] = 2;
        wasmValues.set(workletValues);
      }
    });
  }
  Util2.updateParameterData = updateParameterData;
  function copyBuffers(tree, count, view, reverse = false) {
    if (count.length > 0) {
      let buffer;
      let pos = 0;
      for (let x = 0; x < count.length; x++) {
        if (!tree[x])
          break;
        for (let y = 0; y < count[x]; y++) {
          if (!tree[x][y])
            break;
          buffer = __getFloat32ArrayView(view).subarray(pos * blockSize, (pos + 1) * blockSize);
          if (reverse) {
            tree[x][y].set(buffer);
          } else {
            buffer.set(tree[x][y]);
          }
          pos++;
        }
      }
    }
  }
  Util2.copyBuffers = copyBuffers;
})(Util || (Util = {}));
var blockSize = 128;
if (typeof AudioWorkletProcessor !== "undefined") {
  class Worklet extends AudioWorkletProcessor {
    static get parameterDescriptors() {
      return wasm2.parameterDescriptors;
    }
    constructor() {
      plugin_default.sampleRate.value = sampleRate;
      plugin_default.blockSize.value = blockSize;
      super();
      const pluginOptions = new AudioPluginProcessorOptions(wasm2.parameterDescriptorsPtr);
      this.plugin = new DefaultPlugin(pluginOptions.valueOf());
      this.inputs = new AudioChannels(wasm2.inputChannelCountPtr);
      this.outputs = new AudioChannels(wasm2.outputChannelCountPtr);
      this.paramMap = new AudioParamMap(wasm2.parameterDescriptorsPtr);
      this.port.onmessage = ({data: {event, payload}}) => {
        switch (event) {
          case "MIDIMessageEvent":
            if (this.eventQueue) {
              this.eventQueue.push(payload.receivedTime ?? payload.timeStamp, payload.data[0], payload.data[1], payload.data[2]);
            } else {
              this.updatePluginTime();
              this.handleMIDIMessageEvent(payload.receivedTime ?? payload.timeStamp, payload.data[0], payload.data[1], payload.data[2]);
            }
            break;
          case "initMIDIMessageEventQueue":
            this.eventQueue = new messagequeue_default(payload.buffer);
            break;
        }
      };
      this.updatePluginTime();
      onInit(+this.plugin);
    }
    handleMIDIMessageEvent(receivedTime, d0, d1, d2) {
      onMIDIMessage(+this.plugin, receivedTime, d0, d1, d2);
    }
    processEvents() {
      if (!this.eventQueue)
        return;
      let message;
      while (message = this.eventQueue.slice(4)) {
        ;
        this.handleMIDIMessageEvent(...message);
      }
    }
    updatePluginTime() {
      plugin_default.currentFrame.value = currentFrame;
      plugin_default.currentTime.value = currentTime;
    }
    process(inputs, outputs, parameters) {
      this.updatePluginTime();
      this.processEvents();
      Util.updateParameterData(this.paramMap, parameters);
      __getFloat32ArrayView(this.inputs.buffer).fill(0);
      Util.copyBuffers(inputs, wasm2.inputChannelCount, this.inputs.buffer);
      const tailSize = process(+this.plugin, +this.inputs, +this.outputs, +this.paramMap);
      Util.copyBuffers(outputs, wasm2.outputChannelCount, this.outputs.buffer, true);
      return Boolean(tailSize);
    }
  }
  registerProcessor(wasm2.pluginName + nonce, Worklet);
} else if (typeof postMessage !== "undefined") {
  ;
  self.postMessage({
    nonce,
    path: import.meta.url,
    name: wasm2.pluginName,
    vendor: wasm2.pluginVendor,
    category: wasm2.pluginCategory,
    uniqueId: +wasm2.pluginUniqueId,
    version: +wasm2.pluginVersion,
    inputChannelCount: wasm2.inputChannelCount,
    outputChannelCount: wasm2.outputChannelCount,
    options: {
      numberOfInputs: wasm2.inputChannelCount.length,
      numberOfOutputs: wasm2.outputChannelCount.length,
      outputChannelCount: wasm2.outputChannelCount,
      channelInterpretation: "discrete"
    },
    presets: wasm2.pluginPresets,
    parameters: wasm2.parameterDescriptors
  });
}

    